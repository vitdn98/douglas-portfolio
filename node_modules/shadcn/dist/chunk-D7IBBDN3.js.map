{"version":3,"sources":["../src/registry/schema.ts","../src/registry/api.ts","../src/utils/get-config.ts","../src/utils/get-project-info.ts","../src/utils/frameworks.ts","../src/utils/get-package-info.ts","../src/utils/highlighter.ts","../src/utils/resolve-import.ts","../src/utils/logger.ts","../src/utils/handle-error.ts","../src/utils/updaters/update-tailwind-config.ts","../src/utils/spinner.ts"],"names":["z","registryItemTypeSchema","registryItemFileSchema","registryItemTailwindSchema","registryItemCssVarsSchema","registryItemCssSchema","registryItemSchema","registrySchema","registryIndexSchema","stylesSchema","iconsSchema","registryBaseColorSchema","registryResolvedItemsTreeSchema","path","FRAMEWORKS","fs","getPackageInfo","cwd","shouldThrow","packageJsonPath","fg","loadConfig","PROJECT_SHARED_IGNORE","TS_CONFIG_SCHEMA","getProjectInfo","configFiles","isSrcDir","isTsx","tailwindConfigFile","tailwindCssFile","tailwindVersion","aliasPrefix","packageJson","isTypeScriptProject","getTailwindConfigFile","getTailwindCssFile","getTailwindVersion","getTsConfigAliasPrefix","isUsingAppDir","type","file","dep","packageInfo","config","getConfig","files","needle","contents","tsConfig","alias","paths","getProjectConfig","defaultProjectInfo","existingConfig","projectInfo","resolveConfigPaths","getProjectTailwindVersionFromConfig","cyan","green","red","yellow","highlighter","createMatchPath","resolveImport","importPath","cosmiconfig","DEFAULT_COMPONENTS","DEFAULT_UTILS","DEFAULT_TAILWIND_CSS","DEFAULT_TAILWIND_CONFIG","explorer","rawConfigSchema","configSchema","workspaceConfigSchema","getRawConfig","configResult","componentPath","getWorkspaceConfig","resolvedAliases","key","isAliasKey","resolvedPath","packageRoot","findPackageRoot","result","commonRoot","findCommonRoot","relativePath","matchingPackageRoot","pkgPath","pkgDir","parts1","parts2","commonParts","i","getTargetStyleFromConfig","fallback","logger","args","handleError","error","value","tmpdir","ora","spinner","text","options","deepmerge","objectToString","Project","QuoteKind","ScriptKind","SyntaxKind","updateTailwindConfig","tailwindConfig","tailwindFileRelativePath","tailwindSpinner","raw","output","transformTailwindConfig","input","sourceFile","_createSourceFile","configObject","node","property","quoteChar","_getQuoteChar","addTailwindConfigProperty","plugin","addTailwindConfigPlugin","addTailwindConfigTheme","existingProperty","newProperty","initializer","newValue","initializerText","element","theme","nestSpreadProperties","themeInitializer","themeObjectString","themeObject","parseObjectLiteral","dst","src","resultString","unnestSpreadProperties","existingPlugins","dir","tempFile","obj","properties","prop","spreadAssignment","spreadText","nestSpreadElements","arr","elements","j","propAssignment","unnsetSpreadElements","spreadTest","objectLiteralString","statement","parseObjectLiteralExpression","name","parseArrayLiteralExpression","parseValue","buildTailwindThemeColorsFromCssVars","cssVars","parts","colorName","subType","HttpsProxyAgent","fetch","REGISTRY_URL","agent","registryCache","BASE_COLORS","getRegistryIndex","fetchRegistry","getRegistryStyles","getRegistryIcons","getRegistryItem","style","isUrl","getRegistryBaseColors","getRegistryBaseColor","baseColor","resolveTree","index","names","tree","entry","dependencies","component","self","fetchTree","item","getItemTargetPath","override","parent","url","getRegistryUrl","fetchPromise","response","errorMessages","message","clearRegistryCache","registryResolveItemsTree","registryItems","resolveRegistryItems","payload","registryGetTheme","a","b","tailwind","css","docs","resolveRegistryDependencies","visited","resolveDependencies","itemUrl","dependency","registryDependencies","itemRegistryDependencies","getRegistryTypeAliasMap","getRegistryParentMap","map"],"mappings":"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","sourcesContent":["import { z } from \"zod\"\n\n// Note: if you edit the schema here, you must also edit the schema in the\n// apps/www/public/schema/registry-item.json file.\n\nexport const registryItemTypeSchema = z.enum([\n  \"registry:lib\",\n  \"registry:block\",\n  \"registry:component\",\n  \"registry:ui\",\n  \"registry:hook\",\n  \"registry:page\",\n  \"registry:file\",\n  \"registry:theme\",\n  \"registry:style\",\n\n  // Internal use only\n  \"registry:example\",\n  \"registry:internal\",\n])\n\nexport const registryItemFileSchema = z.discriminatedUnion(\"type\", [\n  // Target is required for registry:file and registry:page\n  z.object({\n    path: z.string(),\n    content: z.string().optional(),\n    type: z.enum([\"registry:file\", \"registry:page\"]),\n    target: z.string(),\n  }),\n  z.object({\n    path: z.string(),\n    content: z.string().optional(),\n    type: registryItemTypeSchema.exclude([\"registry:file\", \"registry:page\"]),\n    target: z.string().optional(),\n  }),\n])\n\nexport const registryItemTailwindSchema = z.object({\n  config: z\n    .object({\n      content: z.array(z.string()).optional(),\n      theme: z.record(z.string(), z.any()).optional(),\n      plugins: z.array(z.string()).optional(),\n    })\n    .optional(),\n})\n\nexport const registryItemCssVarsSchema = z.object({\n  theme: z.record(z.string(), z.string()).optional(),\n  light: z.record(z.string(), z.string()).optional(),\n  dark: z.record(z.string(), z.string()).optional(),\n})\n\nexport const registryItemCssSchema = z.record(\n  z.string(),\n  z.lazy(() =>\n    z.union([\n      z.string(),\n      z.record(\n        z.string(),\n        z.union([z.string(), z.record(z.string(), z.string())])\n      ),\n    ])\n  )\n)\n\nexport const registryItemSchema = z.object({\n  $schema: z.string().optional(),\n  extends: z.string().optional(),\n  name: z.string(),\n  type: registryItemTypeSchema,\n  title: z.string().optional(),\n  author: z.string().min(2).optional(),\n  description: z.string().optional(),\n  dependencies: z.array(z.string()).optional(),\n  devDependencies: z.array(z.string()).optional(),\n  registryDependencies: z.array(z.string()).optional(),\n  files: z.array(registryItemFileSchema).optional(),\n  tailwind: registryItemTailwindSchema.optional(),\n  cssVars: registryItemCssVarsSchema.optional(),\n  css: registryItemCssSchema.optional(),\n  meta: z.record(z.string(), z.any()).optional(),\n  docs: z.string().optional(),\n  categories: z.array(z.string()).optional(),\n})\n\nexport type RegistryItem = z.infer<typeof registryItemSchema>\n\nexport const registrySchema = z.object({\n  name: z.string(),\n  homepage: z.string(),\n  items: z.array(registryItemSchema),\n})\n\nexport type Registry = z.infer<typeof registrySchema>\n\nexport const registryIndexSchema = z.array(registryItemSchema)\n\nexport const stylesSchema = z.array(\n  z.object({\n    name: z.string(),\n    label: z.string(),\n  })\n)\n\nexport const iconsSchema = z.record(\n  z.string(),\n  z.record(z.string(), z.string())\n)\n\nexport const registryBaseColorSchema = z.object({\n  inlineColors: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  cssVars: registryItemCssVarsSchema,\n  cssVarsV4: registryItemCssVarsSchema.optional(),\n  inlineColorsTemplate: z.string(),\n  cssVarsTemplate: z.string(),\n})\n\nexport const registryResolvedItemsTreeSchema = registryItemSchema.pick({\n  dependencies: true,\n  devDependencies: true,\n  files: true,\n  tailwind: true,\n  cssVars: true,\n  css: true,\n  docs: true,\n})\n","import path from \"path\"\nimport { Config, getTargetStyleFromConfig } from \"@/src/utils/get-config\"\nimport { getProjectTailwindVersionFromConfig } from \"@/src/utils/get-project-info\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { buildTailwindThemeColorsFromCssVars } from \"@/src/utils/updaters/update-tailwind-config\"\nimport deepmerge from \"deepmerge\"\nimport { HttpsProxyAgent } from \"https-proxy-agent\"\nimport fetch from \"node-fetch\"\nimport { z } from \"zod\"\n\nimport {\n  iconsSchema,\n  registryBaseColorSchema,\n  registryIndexSchema,\n  registryItemSchema,\n  registryResolvedItemsTreeSchema,\n  stylesSchema,\n} from \"./schema\"\n\nconst REGISTRY_URL = process.env.REGISTRY_URL ?? \"https://ui.shadcn.com/r\"\n\nconst agent = process.env.https_proxy\n  ? new HttpsProxyAgent(process.env.https_proxy)\n  : undefined\n\nconst registryCache = new Map<string, Promise<any>>()\n\nexport const BASE_COLORS = [\n  {\n    name: \"neutral\",\n    label: \"Neutral\",\n  },\n  {\n    name: \"gray\",\n    label: \"Gray\",\n  },\n  {\n    name: \"zinc\",\n    label: \"Zinc\",\n  },\n  {\n    name: \"stone\",\n    label: \"Stone\",\n  },\n  {\n    name: \"slate\",\n    label: \"Slate\",\n  },\n] as const\n\nexport async function getRegistryIndex() {\n  try {\n    const [result] = await fetchRegistry([\"index.json\"])\n\n    return registryIndexSchema.parse(result)\n  } catch (error) {\n    logger.error(\"\\n\")\n    handleError(error)\n  }\n}\n\nexport async function getRegistryStyles() {\n  try {\n    const [result] = await fetchRegistry([\"styles/index.json\"])\n\n    return stylesSchema.parse(result)\n  } catch (error) {\n    logger.error(\"\\n\")\n    handleError(error)\n    return []\n  }\n}\n\nexport async function getRegistryIcons() {\n  try {\n    const [result] = await fetchRegistry([\"icons/index.json\"])\n    return iconsSchema.parse(result)\n  } catch (error) {\n    handleError(error)\n    return {}\n  }\n}\n\nexport async function getRegistryItem(name: string, style: string) {\n  try {\n    const [result] = await fetchRegistry([\n      isUrl(name) ? name : `styles/${style}/${name}.json`,\n    ])\n\n    return registryItemSchema.parse(result)\n  } catch (error) {\n    logger.break()\n    handleError(error)\n    return null\n  }\n}\n\nexport async function getRegistryBaseColors() {\n  return BASE_COLORS\n}\n\nexport async function getRegistryBaseColor(baseColor: string) {\n  try {\n    const [result] = await fetchRegistry([`colors/${baseColor}.json`])\n\n    return registryBaseColorSchema.parse(result)\n  } catch (error) {\n    handleError(error)\n  }\n}\n\nexport async function resolveTree(\n  index: z.infer<typeof registryIndexSchema>,\n  names: string[]\n) {\n  const tree: z.infer<typeof registryIndexSchema> = []\n\n  for (const name of names) {\n    const entry = index.find((entry) => entry.name === name)\n\n    if (!entry) {\n      continue\n    }\n\n    tree.push(entry)\n\n    if (entry.registryDependencies) {\n      const dependencies = await resolveTree(index, entry.registryDependencies)\n      tree.push(...dependencies)\n    }\n  }\n\n  return tree.filter(\n    (component, index, self) =>\n      self.findIndex((c) => c.name === component.name) === index\n  )\n}\n\nexport async function fetchTree(\n  style: string,\n  tree: z.infer<typeof registryIndexSchema>\n) {\n  try {\n    const paths = tree.map((item) => `styles/${style}/${item.name}.json`)\n    const result = await fetchRegistry(paths)\n    return registryIndexSchema.parse(result)\n  } catch (error) {\n    handleError(error)\n  }\n}\n\nexport async function getItemTargetPath(\n  config: Config,\n  item: Pick<z.infer<typeof registryItemSchema>, \"type\">,\n  override?: string\n) {\n  if (override) {\n    return override\n  }\n\n  if (item.type === \"registry:ui\") {\n    return config.resolvedPaths.ui ?? config.resolvedPaths.components\n  }\n\n  const [parent, type] = item.type?.split(\":\") ?? []\n  if (!(parent in config.resolvedPaths)) {\n    return null\n  }\n\n  return path.join(\n    config.resolvedPaths[parent as keyof typeof config.resolvedPaths],\n    type\n  )\n}\n\nexport async function fetchRegistry(paths: string[]) {\n  try {\n    const results = await Promise.all(\n      paths.map(async (path) => {\n        const url = getRegistryUrl(path)\n\n        // Check cache first\n        if (registryCache.has(url)) {\n          return registryCache.get(url)\n        }\n\n        // Store the promise in the cache before awaiting\n        const fetchPromise = (async () => {\n          const response = await fetch(url, { agent })\n\n          if (!response.ok) {\n            const errorMessages: { [key: number]: string } = {\n              400: \"Bad request\",\n              401: \"Unauthorized\",\n              403: \"Forbidden\",\n              404: \"Not found\",\n              500: \"Internal server error\",\n            }\n\n            if (response.status === 401) {\n              throw new Error(\n                `You are not authorized to access the component at ${highlighter.info(\n                  url\n                )}.\\nIf this is a remote registry, you may need to authenticate.`\n              )\n            }\n\n            if (response.status === 404) {\n              throw new Error(\n                `The component at ${highlighter.info(\n                  url\n                )} was not found.\\nIt may not exist at the registry. Please make sure it is a valid component.`\n              )\n            }\n\n            if (response.status === 403) {\n              throw new Error(\n                `You do not have access to the component at ${highlighter.info(\n                  url\n                )}.\\nIf this is a remote registry, you may need to authenticate or a token.`\n              )\n            }\n\n            const result = await response.json()\n            const message =\n              result && typeof result === \"object\" && \"error\" in result\n                ? result.error\n                : response.statusText || errorMessages[response.status]\n            throw new Error(\n              `Failed to fetch from ${highlighter.info(url)}.\\n${message}`\n            )\n          }\n\n          return response.json()\n        })()\n\n        registryCache.set(url, fetchPromise)\n        return fetchPromise\n      })\n    )\n\n    return results\n  } catch (error) {\n    logger.error(\"\\n\")\n    handleError(error)\n    return []\n  }\n}\n\nexport function clearRegistryCache() {\n  registryCache.clear()\n}\n\nexport async function registryResolveItemsTree(\n  names: z.infer<typeof registryItemSchema>[\"name\"][],\n  config: Config\n) {\n  try {\n    const index = await getRegistryIndex()\n    if (!index) {\n      return null\n    }\n\n    // If we're resolving the index, we want it to go first.\n    if (names.includes(\"index\")) {\n      names.unshift(\"index\")\n    }\n\n    let registryItems = await resolveRegistryItems(names, config)\n    let result = await fetchRegistry(registryItems)\n    const payload = z.array(registryItemSchema).parse(result)\n\n    if (!payload) {\n      return null\n    }\n\n    // If we're resolving the index, we want to fetch\n    // the theme item if a base color is provided.\n    // We do this for index only.\n    // Other components will ship with their theme tokens.\n    if (names.includes(\"index\")) {\n      if (config.tailwind.baseColor) {\n        const theme = await registryGetTheme(config.tailwind.baseColor, config)\n        if (theme) {\n          payload.unshift(theme)\n        }\n      }\n    }\n\n    // Sort the payload so that registry:theme is always first.\n    payload.sort((a, b) => {\n      if (a.type === \"registry:theme\") {\n        return -1\n      }\n      return 1\n    })\n\n    let tailwind = {}\n    payload.forEach((item) => {\n      tailwind = deepmerge(tailwind, item.tailwind ?? {})\n    })\n\n    let cssVars = {}\n    payload.forEach((item) => {\n      cssVars = deepmerge(cssVars, item.cssVars ?? {})\n    })\n\n    let css = {}\n    payload.forEach((item) => {\n      css = deepmerge(css, item.css ?? {})\n    })\n\n    let docs = \"\"\n    payload.forEach((item) => {\n      if (item.docs) {\n        docs += `${item.docs}\\n`\n      }\n    })\n\n    return registryResolvedItemsTreeSchema.parse({\n      dependencies: deepmerge.all(\n        payload.map((item) => item.dependencies ?? [])\n      ),\n      devDependencies: deepmerge.all(\n        payload.map((item) => item.devDependencies ?? [])\n      ),\n      files: deepmerge.all(payload.map((item) => item.files ?? [])),\n      tailwind,\n      cssVars,\n      css,\n      docs,\n    })\n  } catch (error) {\n    handleError(error)\n    return null\n  }\n}\n\nasync function resolveRegistryDependencies(\n  url: string,\n  config: Config\n): Promise<string[]> {\n  const visited = new Set<string>()\n  const payload: string[] = []\n\n  const style = config.resolvedPaths?.cwd\n    ? await getTargetStyleFromConfig(config.resolvedPaths.cwd, config.style)\n    : config.style\n\n  async function resolveDependencies(itemUrl: string) {\n    const url = getRegistryUrl(\n      isUrl(itemUrl) ? itemUrl : `styles/${style}/${itemUrl}.json`\n    )\n\n    if (visited.has(url)) {\n      return\n    }\n\n    visited.add(url)\n\n    try {\n      const [result] = await fetchRegistry([url])\n      const item = registryItemSchema.parse(result)\n      payload.push(url)\n\n      if (item.registryDependencies) {\n        for (const dependency of item.registryDependencies) {\n          await resolveDependencies(dependency)\n        }\n      }\n    } catch (error) {\n      console.error(\n        `Error fetching or parsing registry item at ${itemUrl}:`,\n        error\n      )\n    }\n  }\n\n  await resolveDependencies(url)\n  return Array.from(new Set(payload))\n}\n\nexport async function registryGetTheme(name: string, config: Config) {\n  const [baseColor, tailwindVersion] = await Promise.all([\n    getRegistryBaseColor(name),\n    getProjectTailwindVersionFromConfig(config),\n  ])\n  if (!baseColor) {\n    return null\n  }\n\n  // TODO: Move this to the registry i.e registry:theme.\n  const theme = {\n    name,\n    type: \"registry:theme\",\n    tailwind: {\n      config: {\n        theme: {\n          extend: {\n            borderRadius: {\n              lg: \"var(--radius)\",\n              md: \"calc(var(--radius) - 2px)\",\n              sm: \"calc(var(--radius) - 4px)\",\n            },\n            colors: {},\n          },\n        },\n      },\n    },\n    cssVars: {\n      theme: {},\n      light: {\n        radius: \"0.5rem\",\n      },\n      dark: {},\n    },\n  } satisfies z.infer<typeof registryItemSchema>\n\n  if (config.tailwind.cssVariables) {\n    theme.tailwind.config.theme.extend.colors = {\n      ...theme.tailwind.config.theme.extend.colors,\n      ...buildTailwindThemeColorsFromCssVars(baseColor.cssVars.dark ?? {}),\n    }\n    theme.cssVars = {\n      theme: {\n        ...baseColor.cssVars.theme,\n        ...theme.cssVars.theme,\n      },\n      light: {\n        ...baseColor.cssVars.light,\n        ...theme.cssVars.light,\n      },\n      dark: {\n        ...baseColor.cssVars.dark,\n        ...theme.cssVars.dark,\n      },\n    }\n\n    if (tailwindVersion === \"v4\" && baseColor.cssVarsV4) {\n      theme.cssVars = {\n        theme: {\n          ...baseColor.cssVarsV4.theme,\n          ...theme.cssVars.theme,\n        },\n        light: {\n          radius: \"0.625rem\",\n          ...baseColor.cssVarsV4.light,\n        },\n        dark: {\n          ...baseColor.cssVarsV4.dark,\n        },\n      }\n    }\n  }\n\n  return theme\n}\n\nfunction getRegistryUrl(path: string) {\n  if (isUrl(path)) {\n    // If the url contains /chat/b/, we assume it's the v0 registry.\n    // We need to add the /json suffix if it's missing.\n    const url = new URL(path)\n    if (url.pathname.match(/\\/chat\\/b\\//) && !url.pathname.endsWith(\"/json\")) {\n      url.pathname = `${url.pathname}/json`\n    }\n\n    return url.toString()\n  }\n\n  return `${REGISTRY_URL}/${path}`\n}\n\nexport function isUrl(path: string) {\n  try {\n    new URL(path)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\n// TODO: We're double-fetching here. Use a cache.\nexport async function resolveRegistryItems(names: string[], config: Config) {\n  let registryDependencies: string[] = []\n  for (const name of names) {\n    const itemRegistryDependencies = await resolveRegistryDependencies(\n      name,\n      config\n    )\n    registryDependencies.push(...itemRegistryDependencies)\n  }\n\n  return Array.from(new Set(registryDependencies))\n}\n\nexport function getRegistryTypeAliasMap() {\n  return new Map<string, string>([\n    [\"registry:ui\", \"ui\"],\n    [\"registry:lib\", \"lib\"],\n    [\"registry:hook\", \"hooks\"],\n    [\"registry:block\", \"components\"],\n    [\"registry:component\", \"components\"],\n  ])\n}\n\n// Track a dependency and its parent.\nexport function getRegistryParentMap(\n  registryItems: z.infer<typeof registryItemSchema>[]\n) {\n  const map = new Map<string, z.infer<typeof registryItemSchema>>()\n  registryItems.forEach((item) => {\n    if (!item.registryDependencies) {\n      return\n    }\n\n    item.registryDependencies.forEach((dependency) => {\n      map.set(dependency, item)\n    })\n  })\n  return map\n}\n","import path from \"path\"\nimport { getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { resolveImport } from \"@/src/utils/resolve-import\"\nimport { cosmiconfig } from \"cosmiconfig\"\nimport fg from \"fast-glob\"\nimport { loadConfig } from \"tsconfig-paths\"\nimport { z } from \"zod\"\n\nexport const DEFAULT_STYLE = \"default\"\nexport const DEFAULT_COMPONENTS = \"@/components\"\nexport const DEFAULT_UTILS = \"@/lib/utils\"\nexport const DEFAULT_TAILWIND_CSS = \"app/globals.css\"\nexport const DEFAULT_TAILWIND_CONFIG = \"tailwind.config.js\"\nexport const DEFAULT_TAILWIND_BASE_COLOR = \"slate\"\n\n// TODO: Figure out if we want to support all cosmiconfig formats.\n// A simple components.json file would be nice.\nconst explorer = cosmiconfig(\"components\", {\n  searchPlaces: [\"components.json\"],\n})\n\nexport const rawConfigSchema = z\n  .object({\n    $schema: z.string().optional(),\n    style: z.string(),\n    rsc: z.coerce.boolean().default(false),\n    tsx: z.coerce.boolean().default(true),\n    tailwind: z.object({\n      config: z.string().optional(),\n      css: z.string(),\n      baseColor: z.string(),\n      cssVariables: z.boolean().default(true),\n      prefix: z.string().default(\"\").optional(),\n    }),\n    aliases: z.object({\n      components: z.string(),\n      utils: z.string(),\n      ui: z.string().optional(),\n      lib: z.string().optional(),\n      hooks: z.string().optional(),\n    }),\n    iconLibrary: z.string().optional(),\n  })\n  .strict()\n\nexport type RawConfig = z.infer<typeof rawConfigSchema>\n\nexport const configSchema = rawConfigSchema.extend({\n  resolvedPaths: z.object({\n    cwd: z.string(),\n    tailwindConfig: z.string(),\n    tailwindCss: z.string(),\n    utils: z.string(),\n    components: z.string(),\n    lib: z.string(),\n    hooks: z.string(),\n    ui: z.string(),\n  }),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\n// TODO: type the key.\n// Okay for now since I don't want a breaking change.\nexport const workspaceConfigSchema = z.record(configSchema)\n\nexport async function getConfig(cwd: string) {\n  const config = await getRawConfig(cwd)\n\n  if (!config) {\n    return null\n  }\n\n  // Set default icon library if not provided.\n  if (!config.iconLibrary) {\n    config.iconLibrary = config.style === \"new-york\" ? \"radix\" : \"lucide\"\n  }\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport async function resolveConfigPaths(cwd: string, config: RawConfig) {\n  // Read tsconfig.json.\n  const tsConfig = await loadConfig(cwd)\n\n  if (tsConfig.resultType === \"failed\") {\n    throw new Error(\n      `Failed to load ${config.tsx ? \"tsconfig\" : \"jsconfig\"}.json. ${\n        tsConfig.message ?? \"\"\n      }`.trim()\n    )\n  }\n\n  return configSchema.parse({\n    ...config,\n    resolvedPaths: {\n      cwd,\n      tailwindConfig: config.tailwind.config\n        ? path.resolve(cwd, config.tailwind.config)\n        : \"\",\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: await resolveImport(config.aliases[\"utils\"], tsConfig),\n      components: await resolveImport(config.aliases[\"components\"], tsConfig),\n      ui: config.aliases[\"ui\"]\n        ? await resolveImport(config.aliases[\"ui\"], tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases[\"components\"], tsConfig)) ??\n              cwd,\n            \"ui\"\n          ),\n      // TODO: Make this configurable.\n      // For now, we assume the lib and hooks directories are one level up from the components directory.\n      lib: config.aliases[\"lib\"]\n        ? await resolveImport(config.aliases[\"lib\"], tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases[\"utils\"], tsConfig)) ?? cwd,\n            \"..\"\n          ),\n      hooks: config.aliases[\"hooks\"]\n        ? await resolveImport(config.aliases[\"hooks\"], tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases[\"components\"], tsConfig)) ??\n              cwd,\n            \"..\",\n            \"hooks\"\n          ),\n    },\n  })\n}\n\nexport async function getRawConfig(cwd: string): Promise<RawConfig | null> {\n  try {\n    const configResult = await explorer.search(cwd)\n\n    if (!configResult) {\n      return null\n    }\n\n    return rawConfigSchema.parse(configResult.config)\n  } catch (error) {\n    const componentPath = `${cwd}/components.json`\n    throw new Error(\n      `Invalid configuration found in ${highlighter.info(componentPath)}.`\n    )\n  }\n}\n\n// Note: we can check for -workspace.yaml or \"workspace\" in package.json.\n// Since cwd is not necessarily the root of the project.\n// We'll instead check if ui aliases resolve to a different root.\nexport async function getWorkspaceConfig(config: Config) {\n  let resolvedAliases: any = {}\n\n  for (const key of Object.keys(config.aliases)) {\n    if (!isAliasKey(key, config)) {\n      continue\n    }\n\n    const resolvedPath = config.resolvedPaths[key]\n    const packageRoot = await findPackageRoot(\n      config.resolvedPaths.cwd,\n      resolvedPath\n    )\n\n    if (!packageRoot) {\n      resolvedAliases[key] = config\n      continue\n    }\n\n    resolvedAliases[key] = await getConfig(packageRoot)\n  }\n\n  const result = workspaceConfigSchema.safeParse(resolvedAliases)\n  if (!result.success) {\n    return null\n  }\n\n  return result.data\n}\n\nexport async function findPackageRoot(cwd: string, resolvedPath: string) {\n  const commonRoot = findCommonRoot(cwd, resolvedPath)\n  const relativePath = path.relative(commonRoot, resolvedPath)\n\n  const packageRoots = await fg.glob(\"**/package.json\", {\n    cwd: commonRoot,\n    deep: 3,\n    ignore: [\"**/node_modules/**\", \"**/dist/**\", \"**/build/**\", \"**/public/**\"],\n  })\n\n  const matchingPackageRoot = packageRoots\n    .map((pkgPath) => path.dirname(pkgPath))\n    .find((pkgDir) => relativePath.startsWith(pkgDir))\n\n  return matchingPackageRoot ? path.join(commonRoot, matchingPackageRoot) : null\n}\n\nfunction isAliasKey(\n  key: string,\n  config: Config\n): key is keyof Config[\"aliases\"] {\n  return Object.keys(config.resolvedPaths)\n    .filter((key) => key !== \"utils\")\n    .includes(key)\n}\n\nexport function findCommonRoot(cwd: string, resolvedPath: string) {\n  const parts1 = cwd.split(path.sep)\n  const parts2 = resolvedPath.split(path.sep)\n  const commonParts = []\n\n  for (let i = 0; i < Math.min(parts1.length, parts2.length); i++) {\n    if (parts1[i] !== parts2[i]) {\n      break\n    }\n    commonParts.push(parts1[i])\n  }\n\n  return commonParts.join(path.sep)\n}\n\n// TODO: Cache this call.\nexport async function getTargetStyleFromConfig(cwd: string, fallback: string) {\n  const projectInfo = await getProjectInfo(cwd)\n  return projectInfo?.tailwindVersion === \"v4\" ? \"new-york-v4\" : fallback\n}\n","import path from \"path\"\nimport { FRAMEWORKS, Framework } from \"@/src/utils/frameworks\"\nimport {\n  Config,\n  RawConfig,\n  getConfig,\n  resolveConfigPaths,\n} from \"@/src/utils/get-config\"\nimport { getPackageInfo } from \"@/src/utils/get-package-info\"\nimport fg from \"fast-glob\"\nimport fs from \"fs-extra\"\nimport { loadConfig } from \"tsconfig-paths\"\nimport { z } from \"zod\"\n\nexport type TailwindVersion = \"v3\" | \"v4\" | null\n\nexport type ProjectInfo = {\n  framework: Framework\n  isSrcDir: boolean\n  isRSC: boolean\n  isTsx: boolean\n  tailwindConfigFile: string | null\n  tailwindCssFile: string | null\n  tailwindVersion: TailwindVersion\n  aliasPrefix: string | null\n}\n\nconst PROJECT_SHARED_IGNORE = [\n  \"**/node_modules/**\",\n  \".next\",\n  \"public\",\n  \"dist\",\n  \"build\",\n]\n\nconst TS_CONFIG_SCHEMA = z.object({\n  compilerOptions: z.object({\n    paths: z.record(z.string().or(z.array(z.string()))),\n  }),\n})\n\nexport async function getProjectInfo(cwd: string): Promise<ProjectInfo | null> {\n  const [\n    configFiles,\n    isSrcDir,\n    isTsx,\n    tailwindConfigFile,\n    tailwindCssFile,\n    tailwindVersion,\n    aliasPrefix,\n    packageJson,\n  ] = await Promise.all([\n    fg.glob(\n      \"**/{next,vite,astro,app}.config.*|gatsby-config.*|composer.json|react-router.config.*\",\n      {\n        cwd,\n        deep: 3,\n        ignore: PROJECT_SHARED_IGNORE,\n      }\n    ),\n    fs.pathExists(path.resolve(cwd, \"src\")),\n    isTypeScriptProject(cwd),\n    getTailwindConfigFile(cwd),\n    getTailwindCssFile(cwd),\n    getTailwindVersion(cwd),\n    getTsConfigAliasPrefix(cwd),\n    getPackageInfo(cwd, false),\n  ])\n\n  const isUsingAppDir = await fs.pathExists(\n    path.resolve(cwd, `${isSrcDir ? \"src/\" : \"\"}app`)\n  )\n\n  const type: ProjectInfo = {\n    framework: FRAMEWORKS[\"manual\"],\n    isSrcDir,\n    isRSC: false,\n    isTsx,\n    tailwindConfigFile,\n    tailwindCssFile,\n    tailwindVersion,\n    aliasPrefix,\n  }\n\n  // Next.js.\n  if (configFiles.find((file) => file.startsWith(\"next.config.\"))?.length) {\n    type.framework = isUsingAppDir\n      ? FRAMEWORKS[\"next-app\"]\n      : FRAMEWORKS[\"next-pages\"]\n    type.isRSC = isUsingAppDir\n    return type\n  }\n\n  // Astro.\n  if (configFiles.find((file) => file.startsWith(\"astro.config.\"))?.length) {\n    type.framework = FRAMEWORKS[\"astro\"]\n    return type\n  }\n\n  // Gatsby.\n  if (configFiles.find((file) => file.startsWith(\"gatsby-config.\"))?.length) {\n    type.framework = FRAMEWORKS[\"gatsby\"]\n    return type\n  }\n\n  // Laravel.\n  if (configFiles.find((file) => file.startsWith(\"composer.json\"))?.length) {\n    type.framework = FRAMEWORKS[\"laravel\"]\n    return type\n  }\n\n  // Remix.\n  if (\n    Object.keys(packageJson?.dependencies ?? {}).find((dep) =>\n      dep.startsWith(\"@remix-run/\")\n    )\n  ) {\n    type.framework = FRAMEWORKS[\"remix\"]\n    return type\n  }\n\n  // TanStack Start.\n  if (\n    configFiles.find((file) => file.startsWith(\"app.config.\"))?.length &&\n    [\n      ...Object.keys(packageJson?.dependencies ?? {}),\n      ...Object.keys(packageJson?.devDependencies ?? {}),\n    ].find((dep) => dep.startsWith(\"@tanstack/start\"))\n  ) {\n    type.framework = FRAMEWORKS[\"tanstack-start\"]\n    return type\n  }\n\n  // React Router.\n  if (\n    configFiles.find((file) => file.startsWith(\"react-router.config.\"))?.length\n  ) {\n    type.framework = FRAMEWORKS[\"react-router\"]\n    return type\n  }\n\n  // Vite.\n  // Some Remix templates also have a vite.config.* file.\n  // We'll assume that it got caught by the Remix check above.\n  if (configFiles.find((file) => file.startsWith(\"vite.config.\"))?.length) {\n    type.framework = FRAMEWORKS[\"vite\"]\n    return type\n  }\n\n  return type\n}\n\nexport async function getTailwindVersion(\n  cwd: string\n): Promise<ProjectInfo[\"tailwindVersion\"]> {\n  const [packageInfo, config] = await Promise.all([\n    getPackageInfo(cwd, false),\n    getConfig(cwd),\n  ])\n\n  // If the config file is empty, we can assume that it's a v4 project.\n  if (config?.tailwind?.config === \"\") {\n    return \"v4\"\n  }\n\n  if (\n    !packageInfo?.dependencies?.tailwindcss &&\n    !packageInfo?.devDependencies?.tailwindcss\n  ) {\n    return null\n  }\n\n  if (\n    /^(?:\\^|~)?3(?:\\.\\d+)*(?:-.*)?$/.test(\n      packageInfo?.dependencies?.tailwindcss ||\n        packageInfo?.devDependencies?.tailwindcss ||\n        \"\"\n    )\n  ) {\n    return \"v3\"\n  }\n\n  return \"v4\"\n}\n\nexport async function getTailwindCssFile(cwd: string) {\n  const [files, tailwindVersion] = await Promise.all([\n    fg.glob([\"**/*.css\", \"**/*.scss\"], {\n      cwd,\n      deep: 5,\n      ignore: PROJECT_SHARED_IGNORE,\n    }),\n    getTailwindVersion(cwd),\n  ])\n\n  if (!files.length) {\n    return null\n  }\n\n  const needle =\n    tailwindVersion === \"v4\" ? `@import \"tailwindcss\"` : \"@tailwind base\"\n  for (const file of files) {\n    const contents = await fs.readFile(path.resolve(cwd, file), \"utf8\")\n    if (\n      contents.includes(`@import \"tailwindcss\"`) ||\n      contents.includes(`@import 'tailwindcss'`) ||\n      contents.includes(`@tailwind base`)\n    ) {\n      return file\n    }\n  }\n\n  return null\n}\n\nexport async function getTailwindConfigFile(cwd: string) {\n  const files = await fg.glob(\"tailwind.config.*\", {\n    cwd,\n    deep: 3,\n    ignore: PROJECT_SHARED_IGNORE,\n  })\n\n  if (!files.length) {\n    return null\n  }\n\n  return files[0]\n}\n\nexport async function getTsConfigAliasPrefix(cwd: string) {\n  const tsConfig = await loadConfig(cwd)\n\n  if (\n    tsConfig?.resultType === \"failed\" ||\n    !Object.entries(tsConfig?.paths).length\n  ) {\n    return null\n  }\n\n  // This assume that the first alias is the prefix.\n  for (const [alias, paths] of Object.entries(tsConfig.paths)) {\n    if (\n      paths.includes(\"./*\") ||\n      paths.includes(\"./src/*\") ||\n      paths.includes(\"./app/*\") ||\n      paths.includes(\"./resources/js/*\") // Laravel.\n    ) {\n      return alias.replace(/\\/\\*$/, \"\") ?? null\n    }\n  }\n\n  // Use the first alias as the prefix.\n  return Object.keys(tsConfig?.paths)?.[0].replace(/\\/\\*$/, \"\") ?? null\n}\n\nexport async function isTypeScriptProject(cwd: string) {\n  const files = await fg.glob(\"tsconfig.*\", {\n    cwd,\n    deep: 1,\n    ignore: PROJECT_SHARED_IGNORE,\n  })\n\n  return files.length > 0\n}\n\nexport async function getTsConfig(cwd: string) {\n  for (const fallback of [\n    \"tsconfig.json\",\n    \"tsconfig.web.json\",\n    \"tsconfig.app.json\",\n  ]) {\n    const filePath = path.resolve(cwd, fallback)\n    if (!(await fs.pathExists(filePath))) {\n      continue\n    }\n\n    // We can't use fs.readJSON because it doesn't support comments.\n    const contents = await fs.readFile(filePath, \"utf8\")\n    const cleanedContents = contents.replace(/\\/\\*\\s*\\*\\//g, \"\")\n    const result = TS_CONFIG_SCHEMA.safeParse(JSON.parse(cleanedContents))\n\n    if (result.error) {\n      continue\n    }\n\n    return result.data\n  }\n\n  return null\n}\n\nexport async function getProjectConfig(\n  cwd: string,\n  defaultProjectInfo: ProjectInfo | null = null\n): Promise<Config | null> {\n  // Check for existing component config.\n  const [existingConfig, projectInfo] = await Promise.all([\n    getConfig(cwd),\n    !defaultProjectInfo\n      ? getProjectInfo(cwd)\n      : Promise.resolve(defaultProjectInfo),\n  ])\n\n  if (existingConfig) {\n    return existingConfig\n  }\n\n  if (\n    !projectInfo ||\n    !projectInfo.tailwindCssFile ||\n    (projectInfo.tailwindVersion === \"v3\" && !projectInfo.tailwindConfigFile)\n  ) {\n    return null\n  }\n\n  const config: RawConfig = {\n    $schema: \"https://ui.shadcn.com/schema.json\",\n    rsc: projectInfo.isRSC,\n    tsx: projectInfo.isTsx,\n    style: \"new-york\",\n    tailwind: {\n      config: projectInfo.tailwindConfigFile ?? \"\",\n      baseColor: \"zinc\",\n      css: projectInfo.tailwindCssFile,\n      cssVariables: true,\n      prefix: \"\",\n    },\n    iconLibrary: \"lucide\",\n    aliases: {\n      components: `${projectInfo.aliasPrefix}/components`,\n      ui: `${projectInfo.aliasPrefix}/components/ui`,\n      hooks: `${projectInfo.aliasPrefix}/hooks`,\n      lib: `${projectInfo.aliasPrefix}/lib`,\n      utils: `${projectInfo.aliasPrefix}/lib/utils`,\n    },\n  }\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport async function getProjectTailwindVersionFromConfig(\n  config: Config\n): Promise<TailwindVersion> {\n  if (!config.resolvedPaths?.cwd) {\n    return \"v3\"\n  }\n\n  const projectInfo = await getProjectInfo(config.resolvedPaths.cwd)\n\n  if (!projectInfo?.tailwindVersion) {\n    return null\n  }\n\n  return projectInfo.tailwindVersion\n}\n","export const FRAMEWORKS = {\n  \"next-app\": {\n    name: \"next-app\",\n    label: \"Next.js\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/next\",\n      tailwind: \"https://tailwindcss.com/docs/guides/nextjs\",\n    },\n  },\n  \"next-pages\": {\n    name: \"next-pages\",\n    label: \"Next.js\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/next\",\n      tailwind: \"https://tailwindcss.com/docs/guides/nextjs\",\n    },\n  },\n  remix: {\n    name: \"remix\",\n    label: \"Remix\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/remix\",\n      tailwind: \"https://tailwindcss.com/docs/guides/remix\",\n    },\n  },\n  \"react-router\": {\n    name: \"react-router\",\n    label: \"React Router\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/react-router\",\n      tailwind:\n        \"https://tailwindcss.com/docs/installation/framework-guides/react-router\",\n    },\n  },\n  vite: {\n    name: \"vite\",\n    label: \"Vite\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/vite\",\n      tailwind: \"https://tailwindcss.com/docs/guides/vite\",\n    },\n  },\n  astro: {\n    name: \"astro\",\n    label: \"Astro\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/astro\",\n      tailwind: \"https://tailwindcss.com/docs/guides/astro\",\n    },\n  },\n  laravel: {\n    name: \"laravel\",\n    label: \"Laravel\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/laravel\",\n      tailwind: \"https://tailwindcss.com/docs/guides/laravel\",\n    },\n  },\n  \"tanstack-start\": {\n    name: \"tanstack-start\",\n    label: \"TanStack Start\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/tanstack\",\n      tailwind: \"https://tailwindcss.com/docs/installation/using-postcss\",\n    },\n  },\n  gatsby: {\n    name: \"gatsby\",\n    label: \"Gatsby\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/gatsby\",\n      tailwind: \"https://tailwindcss.com/docs/guides/gatsby\",\n    },\n  },\n  manual: {\n    name: \"manual\",\n    label: \"Manual\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/manual\",\n      tailwind: \"https://tailwindcss.com/docs/installation\",\n    },\n  },\n} as const\n\nexport type Framework = (typeof FRAMEWORKS)[keyof typeof FRAMEWORKS]\n","import path from \"path\"\nimport fs from \"fs-extra\"\nimport { type PackageJson } from \"type-fest\"\n\nexport function getPackageInfo(\n  cwd: string = \"\",\n  shouldThrow: boolean = true\n): PackageJson | null {\n  const packageJsonPath = path.join(cwd, \"package.json\")\n\n  return fs.readJSONSync(packageJsonPath, {\n    throws: shouldThrow,\n  }) as PackageJson\n}\n","import { cyan, green, red, yellow } from \"kleur/colors\"\n\nexport const highlighter = {\n  error: red,\n  warn: yellow,\n  info: cyan,\n  success: green,\n}\n","import { createMatchPath, type ConfigLoaderSuccessResult } from \"tsconfig-paths\"\n\nexport async function resolveImport(\n  importPath: string,\n  config: Pick<ConfigLoaderSuccessResult, \"absoluteBaseUrl\" | \"paths\">\n) {\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(\n    importPath,\n    undefined,\n    () => true,\n    [\".ts\", \".tsx\"]\n  )\n}\n","import { highlighter } from \"@/src/utils/highlighter\"\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(highlighter.error(args.join(\" \")))\n  },\n  warn(...args: unknown[]) {\n    console.log(highlighter.warn(args.join(\" \")))\n  },\n  info(...args: unknown[]) {\n    console.log(highlighter.info(args.join(\" \")))\n  },\n  success(...args: unknown[]) {\n    console.log(highlighter.success(args.join(\" \")))\n  },\n  log(...args: unknown[]) {\n    console.log(args.join(\" \"))\n  },\n  break() {\n    console.log(\"\")\n  },\n}\n","import { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { z } from \"zod\"\n\nexport function handleError(error: unknown) {\n  logger.error(\n    `Something went wrong. Please check the error below for more details.`\n  )\n  logger.error(`If the problem persists, please open an issue on GitHub.`)\n  logger.error(\"\")\n  if (typeof error === \"string\") {\n    logger.error(error)\n    logger.break()\n    process.exit(1)\n  }\n\n  if (error instanceof z.ZodError) {\n    logger.error(\"Validation failed:\")\n    for (const [key, value] of Object.entries(error.flatten().fieldErrors)) {\n      logger.error(`- ${highlighter.info(key)}: ${value}`)\n    }\n    logger.break()\n    process.exit(1)\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message)\n    logger.break()\n    process.exit(1)\n  }\n\n  logger.break()\n  process.exit(1)\n}\n","import { promises as fs } from \"fs\"\nimport { tmpdir } from \"os\"\nimport path from \"path\"\nimport {\n  registryItemCssVarsSchema,\n  registryItemTailwindSchema,\n} from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { TailwindVersion } from \"@/src/utils/get-project-info\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport deepmerge from \"deepmerge\"\nimport objectToString from \"stringify-object\"\nimport { type Config as TailwindConfig } from \"tailwindcss\"\nimport {\n  ArrayLiteralExpression,\n  ObjectLiteralExpression,\n  Project,\n  PropertyAssignment,\n  QuoteKind,\n  ScriptKind,\n  SyntaxKind,\n  VariableStatement,\n} from \"ts-morph\"\nimport { z } from \"zod\"\n\nexport type UpdaterTailwindConfig = Omit<TailwindConfig, \"plugins\"> & {\n  // We only want string plugins for now.\n  plugins?: string[]\n}\n\nexport async function updateTailwindConfig(\n  tailwindConfig:\n    | z.infer<typeof registryItemTailwindSchema>[\"config\"]\n    | undefined,\n  config: Config,\n  options: {\n    silent?: boolean\n    tailwindVersion?: TailwindVersion\n  }\n) {\n  if (!tailwindConfig) {\n    return\n  }\n\n  options = {\n    silent: false,\n    tailwindVersion: \"v3\",\n    ...options,\n  }\n\n  // No tailwind config in v4.\n  if (options.tailwindVersion === \"v4\") {\n    return\n  }\n\n  const tailwindFileRelativePath = path.relative(\n    config.resolvedPaths.cwd,\n    config.resolvedPaths.tailwindConfig\n  )\n  const tailwindSpinner = spinner(\n    `Updating ${highlighter.info(tailwindFileRelativePath)}`,\n    {\n      silent: options.silent,\n    }\n  ).start()\n  const raw = await fs.readFile(config.resolvedPaths.tailwindConfig, \"utf8\")\n  const output = await transformTailwindConfig(raw, tailwindConfig, config)\n  await fs.writeFile(config.resolvedPaths.tailwindConfig, output, \"utf8\")\n  tailwindSpinner?.succeed()\n}\n\nexport async function transformTailwindConfig(\n  input: string,\n  tailwindConfig: UpdaterTailwindConfig,\n  config: Config\n) {\n  const sourceFile = await _createSourceFile(input, config)\n  // Find the object with content property.\n  // This is faster than traversing the default export.\n  // TODO: maybe we do need to traverse the default export?\n  const configObject = sourceFile\n    .getDescendantsOfKind(SyntaxKind.ObjectLiteralExpression)\n    .find((node) =>\n      node\n        .getProperties()\n        .some(\n          (property) =>\n            property.isKind(SyntaxKind.PropertyAssignment) &&\n            property.getName() === \"content\"\n        )\n    )\n\n  // We couldn't find the config object, so we return the input as is.\n  if (!configObject) {\n    return input\n  }\n\n  const quoteChar = _getQuoteChar(configObject)\n\n  // Add darkMode.\n  addTailwindConfigProperty(\n    configObject,\n    {\n      name: \"darkMode\",\n      value: \"class\",\n    },\n    { quoteChar }\n  )\n\n  // Add Tailwind config plugins.\n  tailwindConfig.plugins?.forEach((plugin) => {\n    addTailwindConfigPlugin(configObject, plugin)\n  })\n\n  // Add Tailwind config theme.\n  if (tailwindConfig.theme) {\n    await addTailwindConfigTheme(configObject, tailwindConfig.theme)\n  }\n\n  return sourceFile.getFullText()\n}\n\nfunction addTailwindConfigProperty(\n  configObject: ObjectLiteralExpression,\n  property: {\n    name: string\n    value: string\n  },\n  {\n    quoteChar,\n  }: {\n    quoteChar: string\n  }\n) {\n  const existingProperty = configObject.getProperty(\"darkMode\")\n\n  if (!existingProperty) {\n    const newProperty = {\n      name: property.name,\n      initializer: `[${quoteChar}${property.value}${quoteChar}]`,\n    }\n\n    // We need to add darkMode as the first property.\n    if (property.name === \"darkMode\") {\n      configObject.insertPropertyAssignment(0, newProperty)\n      return configObject\n    }\n\n    configObject.addPropertyAssignment(newProperty)\n\n    return configObject\n  }\n\n  if (existingProperty.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingProperty.getInitializer()\n    const newValue = `${quoteChar}${property.value}${quoteChar}`\n\n    // If property is a string, change it to an array and append.\n    if (initializer?.isKind(SyntaxKind.StringLiteral)) {\n      const initializerText = initializer.getText()\n      initializer.replaceWithText(`[${initializerText}, ${newValue}]`)\n      return configObject\n    }\n\n    // If property is an array, append.\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Check if the array already contains the value.\n      if (\n        initializer\n          .getElements()\n          .map((element) => element.getText())\n          .includes(newValue)\n      ) {\n        return configObject\n      }\n      initializer.addElement(newValue)\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n\nasync function addTailwindConfigTheme(\n  configObject: ObjectLiteralExpression,\n  theme: UpdaterTailwindConfig[\"theme\"]\n) {\n  // Ensure there is a theme property.\n  if (!configObject.getProperty(\"theme\")) {\n    configObject.addPropertyAssignment({\n      name: \"theme\",\n      initializer: \"{}\",\n    })\n  }\n\n  // Nest all spread properties.\n  nestSpreadProperties(configObject)\n\n  const themeProperty = configObject\n    .getPropertyOrThrow(\"theme\")\n    ?.asKindOrThrow(SyntaxKind.PropertyAssignment)\n\n  const themeInitializer = themeProperty.getInitializer()\n  if (themeInitializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n    const themeObjectString = themeInitializer.getText()\n    const themeObject = await parseObjectLiteral(themeObjectString)\n    const result = deepmerge(themeObject, theme, {\n      arrayMerge: (dst, src) => src,\n    })\n    const resultString = objectToString(result)\n      .replace(/\\'\\.\\.\\.(.*)\\'/g, \"...$1\") // Remove quote around spread element\n      .replace(/\\'\\\"/g, \"'\") // Replace `\\\" with \"\n      .replace(/\\\"\\'/g, \"'\") // Replace `\\\" with \"\n      .replace(/\\'\\[/g, \"[\") // Replace `[ with [\n      .replace(/\\]\\'/g, \"]\") // Replace `] with ]\n      .replace(/\\'\\\\\\'/g, \"'\") // Replace `\\' with '\n      .replace(/\\\\\\'/g, \"'\") // Replace \\' with '\n      .replace(/\\\\\\'\\'/g, \"'\")\n      .replace(/\\'\\'/g, \"'\")\n    themeInitializer.replaceWithText(resultString)\n  }\n\n  // Unnest all spread properties.\n  unnestSpreadProperties(configObject)\n}\n\nfunction addTailwindConfigPlugin(\n  configObject: ObjectLiteralExpression,\n  plugin: string\n) {\n  const existingPlugins = configObject.getProperty(\"plugins\")\n\n  if (!existingPlugins) {\n    configObject.addPropertyAssignment({\n      name: \"plugins\",\n      initializer: `[${plugin}]`,\n    })\n\n    return configObject\n  }\n\n  if (existingPlugins.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingPlugins.getInitializer()\n\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      if (\n        initializer\n          .getElements()\n          .map((element) => {\n            return element.getText().replace(/[\"']/g, \"\")\n          })\n          .includes(plugin.replace(/[\"']/g, \"\"))\n      ) {\n        return configObject\n      }\n      initializer.addElement(plugin)\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n\nexport async function _createSourceFile(input: string, config: Config | null) {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), \"shadcn-\"))\n  const resolvedPath =\n    config?.resolvedPaths?.tailwindConfig || \"tailwind.config.ts\"\n  const tempFile = path.join(dir, `shadcn-${path.basename(resolvedPath)}`)\n\n  const project = new Project({\n    compilerOptions: {},\n  })\n  const sourceFile = project.createSourceFile(tempFile, input, {\n    // Note: .js and .mjs can still be valid for TS projects.\n    // We can't infer TypeScript from config.tsx.\n    scriptKind:\n      path.extname(resolvedPath) === \".ts\" ? ScriptKind.TS : ScriptKind.JS,\n  })\n\n  return sourceFile\n}\n\nexport function _getQuoteChar(configObject: ObjectLiteralExpression) {\n  return configObject\n    .getFirstDescendantByKind(SyntaxKind.StringLiteral)\n    ?.getQuoteKind() === QuoteKind.Single\n    ? \"'\"\n    : '\"'\n}\n\nexport function nestSpreadProperties(obj: ObjectLiteralExpression) {\n  const properties = obj.getProperties()\n\n  for (let i = 0; i < properties.length; i++) {\n    const prop = properties[i]\n    if (prop.isKind(SyntaxKind.SpreadAssignment)) {\n      const spreadAssignment = prop.asKindOrThrow(SyntaxKind.SpreadAssignment)\n      const spreadText = spreadAssignment.getExpression().getText()\n\n      // Replace spread with a property assignment\n      obj.insertPropertyAssignment(i, {\n        // Need to escape the name with \" so that deepmerge doesn't mishandle the key\n        name: `\"___${spreadText.replace(/^\\.\\.\\./, \"\")}\"`,\n        initializer: `\"...${spreadText.replace(/^\\.\\.\\./, \"\")}\"`,\n      })\n\n      // Remove the original spread assignment\n      spreadAssignment.remove()\n    } else if (prop.isKind(SyntaxKind.PropertyAssignment)) {\n      const propAssignment = prop.asKindOrThrow(SyntaxKind.PropertyAssignment)\n      const initializer = propAssignment.getInitializer()\n\n      if (\n        initializer &&\n        initializer.isKind(SyntaxKind.ObjectLiteralExpression)\n      ) {\n        // Recursively process nested object literals\n        nestSpreadProperties(\n          initializer.asKindOrThrow(SyntaxKind.ObjectLiteralExpression)\n        )\n      } else if (\n        initializer &&\n        initializer.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        nestSpreadElements(\n          initializer.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n        )\n      }\n    }\n  }\n}\n\nexport function nestSpreadElements(arr: ArrayLiteralExpression) {\n  const elements = arr.getElements()\n  for (let j = 0; j < elements.length; j++) {\n    const element = elements[j]\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      // Recursive check on objects within arrays\n      nestSpreadProperties(\n        element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression)\n      )\n    } else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Recursive check on nested arrays\n      nestSpreadElements(\n        element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n      )\n    } else if (element.isKind(SyntaxKind.SpreadElement)) {\n      const spreadText = element.getText()\n      // Spread element within an array\n      arr.removeElement(j)\n      arr.insertElement(j, `\"${spreadText}\"`)\n    }\n  }\n}\n\nexport function unnestSpreadProperties(obj: ObjectLiteralExpression) {\n  const properties = obj.getProperties()\n\n  for (let i = 0; i < properties.length; i++) {\n    const prop = properties[i]\n    if (prop.isKind(SyntaxKind.PropertyAssignment)) {\n      const propAssignment = prop as PropertyAssignment\n      const initializer = propAssignment.getInitializer()\n\n      if (initializer && initializer.isKind(SyntaxKind.StringLiteral)) {\n        const value = initializer\n          .asKindOrThrow(SyntaxKind.StringLiteral)\n          .getLiteralValue()\n        if (value.startsWith(\"...\")) {\n          obj.insertSpreadAssignment(i, { expression: value.slice(3) })\n          propAssignment.remove()\n        }\n      } else if (initializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n        unnestSpreadProperties(initializer as ObjectLiteralExpression)\n      } else if (\n        initializer &&\n        initializer.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        unnsetSpreadElements(\n          initializer.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n        )\n      }\n    }\n  }\n}\n\nexport function unnsetSpreadElements(arr: ArrayLiteralExpression) {\n  const elements = arr.getElements()\n  for (let j = 0; j < elements.length; j++) {\n    const element = elements[j]\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      // Recursive check on objects within arrays\n      unnestSpreadProperties(\n        element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression)\n      )\n    } else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Recursive check on nested arrays\n      unnsetSpreadElements(\n        element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n      )\n    } else if (element.isKind(SyntaxKind.StringLiteral)) {\n      const spreadText = element.getText()\n      // check if spread element\n      const spreadTest = /(?:^['\"])(\\.\\.\\..*)(?:['\"]$)/g\n      if (spreadTest.test(spreadText)) {\n        arr.removeElement(j)\n        arr.insertElement(j, spreadText.replace(spreadTest, \"$1\"))\n      }\n    }\n  }\n}\n\nasync function parseObjectLiteral(objectLiteralString: string): Promise<any> {\n  const sourceFile = await _createSourceFile(\n    `const theme = ${objectLiteralString}`,\n    null\n  )\n\n  const statement = sourceFile.getStatements()[0]\n  if (statement?.getKind() === SyntaxKind.VariableStatement) {\n    const declaration = (statement as VariableStatement)\n      .getDeclarationList()\n      ?.getDeclarations()[0]\n    const initializer = declaration.getInitializer()\n    if (initializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      return await parseObjectLiteralExpression(initializer)\n    }\n  }\n\n  throw new Error(\"Invalid input: not an object literal\")\n}\n\nfunction parseObjectLiteralExpression(node: ObjectLiteralExpression): any {\n  const result: any = {}\n  for (const property of node.getProperties()) {\n    if (property.isKind(SyntaxKind.PropertyAssignment)) {\n      const name = property.getName().replace(/\\'/g, \"\")\n      if (\n        property.getInitializer()?.isKind(SyntaxKind.ObjectLiteralExpression)\n      ) {\n        result[name] = parseObjectLiteralExpression(\n          property.getInitializer() as ObjectLiteralExpression\n        )\n      } else if (\n        property.getInitializer()?.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        result[name] = parseArrayLiteralExpression(\n          property.getInitializer() as ArrayLiteralExpression\n        )\n      } else {\n        result[name] = parseValue(property.getInitializer())\n      }\n    }\n  }\n  return result\n}\n\nfunction parseArrayLiteralExpression(node: ArrayLiteralExpression): any[] {\n  const result: any[] = []\n  for (const element of node.getElements()) {\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      result.push(\n        parseObjectLiteralExpression(\n          element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression)\n        )\n      )\n    } else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      result.push(\n        parseArrayLiteralExpression(\n          element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n        )\n      )\n    } else {\n      result.push(parseValue(element))\n    }\n  }\n  return result\n}\n\nfunction parseValue(node: any): any {\n  switch (node.getKind()) {\n    case SyntaxKind.StringLiteral:\n      return node.getText()\n    case SyntaxKind.NumericLiteral:\n      return Number(node.getText())\n    case SyntaxKind.TrueKeyword:\n      return true\n    case SyntaxKind.FalseKeyword:\n      return false\n    case SyntaxKind.NullKeyword:\n      return null\n    case SyntaxKind.ArrayLiteralExpression:\n      return node.getElements().map(parseValue)\n    case SyntaxKind.ObjectLiteralExpression:\n      return parseObjectLiteralExpression(node)\n    default:\n      return node.getText()\n  }\n}\n\nexport function buildTailwindThemeColorsFromCssVars(\n  cssVars: z.infer<typeof registryItemCssVarsSchema>\n) {\n  const result: Record<string, any> = {}\n\n  for (const key of Object.keys(cssVars)) {\n    const parts = key.split(\"-\")\n    const colorName = parts[0]\n    const subType = parts.slice(1).join(\"-\")\n\n    if (subType === \"\") {\n      if (typeof result[colorName] === \"object\") {\n        result[colorName].DEFAULT = `hsl(var(--${key}))`\n      } else {\n        result[colorName] = `hsl(var(--${key}))`\n      }\n    } else {\n      if (typeof result[colorName] !== \"object\") {\n        result[colorName] = { DEFAULT: `hsl(var(--${colorName}))` }\n      }\n      result[colorName][subType] = `hsl(var(--${key}))`\n    }\n  }\n\n  // Remove DEFAULT if it's not in the original cssVars\n  for (const [colorName, value] of Object.entries(result)) {\n    if (\n      typeof value === \"object\" &&\n      value.DEFAULT === `hsl(var(--${colorName}))` &&\n      !(colorName in cssVars)\n    ) {\n      delete value.DEFAULT\n    }\n  }\n\n  return result\n}\n","import ora, { type Options } from \"ora\"\n\nexport function spinner(\n  text: Options[\"text\"],\n  options?: {\n    silent?: boolean\n  }\n) {\n  return ora({\n    text,\n    isSilent: options?.silent,\n  })\n}\n"]}